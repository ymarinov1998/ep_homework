program -> ( function_definition )*
function_definition -> FUNCTION IDENTIFIER ( formal_parameters )? ( RETURNS type )? block
formal_parameters -> type IDENTIFIER ( COMMA formal_parameters )*
type -> primitive_type | array_type
block -> LBRACKET ( statement )* RBRACKET
primitive_type -> INT | BOOL
array_type -> primitive_type LSQUARE RSQUARE
statement -> simple_statement SEMICOLON | compound_statement
simple_statement -> variable_definition | assignment | unary_operation | return_statement | function_call
compound_statement -> if_statement | while_statement | for_statement | switch_statement
variable_definition -> type assignment
assignment -> variable ( BECOMES assignable | special_assignment_operator expression )
special_assignment_operator -> ASSIGNMENT_ADD | ASSIGNMENT_DIFF | ASSIGNMENT_PROD | ASSIGNMENT_QUOT
unary_operation -> variable ( INCREMENT | DECREMENT )
return_statement -> RETURN expression ( IF expression ELSE expression )?
if_statement -> IF expression block ( ELSEIF expression block )* ( ELSE block )?
while_statement -> WHILE expression block
for_statement -> FOR ( LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN | type IDENTIFIER IN IDENTIFIER ) block
switch_statement -> SWITCH LPAREN IDENTIFIER RPAREN LBRACKET ( CASE expression block )* DEFAULT block RBRACKET
variable -> IDENTIFIER | index_variable
assignable -> array_initialization | expression
expression -> simple_expression | simple_expression relational_operator simple_expression
index_variable -> IDENTIFIER LSQUARE expression RSQUARE
array_initialization -> primitive_type LSQUARE expression RSQUARE
simple_expression -> signed_term ( ( additive_operator | OR )) signed_term)*
relational_operator -> EQUAL | NOT_EQUAL | GREATER_THAN | LESS_THAN | GREATER_THAN_OR_EQUAL | LESS_THAN_OR_EQUAL
signed_term -> (unary_operator)? term
additive_operator -> PLUS | MINUS
unary_operator -> NOT | MINUS
term -> factor ( ( multiplicative_operator | AND ) ) factor
factor -> variable | INT_LITERAL | BOOLEAN_LITERAL | LPAREN expression RPAREN | function_call
multiplicative_operator -> MUL | DIV
function_call -> IDENTIFIER LPAREN ( actual_parameters )? RPAREN
actual_parameters -> expression ( COMMA expression )*